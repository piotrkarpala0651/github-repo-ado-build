name: Update Release Notes

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
        releaseId: 
            description: 'The Id of the release to update - database Id (integer), not visible in the UI'
            required: true
            type: number

permissions:
  contents: write

jobs:
  update-release-notes:
    runs-on: ubuntu-latest

    steps:

      - name: Install dependencies
        run: npm install @actions/http-client

      - name: Update release notes
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const httpm = require('@actions/http-client');
            const { owner, repo, release } = context.repo;

            core.info('Release event payload:', context.payload.release);

            const releaseId = '${{ inputs.releaseId }}' || context.payload.release?.id;

            if (!releaseId) {
              core.setFailed('No release id provided');
              return;
            }

            core.info(`Updating release notes for release ${releaseId}`);

            // Get the release
            const releaseResponse = await github.rest.repos.getRelease({
              owner,
              repo,
              release_id: releaseId
            });

            const body = releaseResponse.data.body;

            // find all the work item ids, making sure the regex is greedy
            const workItemIds = (body.match(/(?<!\[)AB#\d+/g) || [] )
              .map((id) => id.replace('AB#', ''))
              .map((id) => parseInt(id, 10));

            
            core.info('Work item ids:', workItemIds);

            // get work item details
            const auth = Buffer.from(`:${{ secrets.ADO_PAT }}`).toString('base64');
            const http = new httpm.HttpClient('read-work-item-titles', [], {
              headers: {
                Authorization: `Basic :${auth}`,
                'Content-Type': 'application/json'
              }
            });

            const response = await http.postJson('https://dev.azure.com/${{ vars.ADO_ORG }}/${{ vars.ADO_PROJECT }}/_apis/wit/workitemsbatch?api-version=7.1-preview.1', {
              ids: workItemIds,
              "fields": [
                "System.Id",
                "System.Title",
                "System.WorkItemType",
                "System.State",
                "Microsoft.VSTS.Scheduling.RemainingWork"
              ]
            });
            core.info('Work item batch response:', response.statusCode);

            if (response.statusCode !== 200) {
              core.setFailed('Failed to get work item details');
              return;
            }

            const workItems = response.result;
            var newBody = body;

            for (const id of workItemIds) {
              const workItem = workItems.value.find((wi) => wi.id === id);

              if (workItem) {
                core.info(`Work item ${id}: ${workItem.fields['System.WorkItemType']} ${workItem.fields['System.Title']} (${workItem.fields['System.State']})`);

                const regex = new RegExp(`(?<!\[)AB#${id}\\b`, 'g');
                newBody = newBody.replace(regex, `[AB#${id} ${workItem.fields['System.WorkItemType']} ${workItem.fields['System.Title']} (${workItem.fields['System.State']})](https://dev.azure.com/piotrkarpala0651/github-repo-ado-build/_workitems/edit/${id})`);

              } else {
                core.warning(`Work item ${id} not found`);
              }
            }

            core.info('New release notes:', newBody);

            // Update the release notes
            await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: releaseId,
                body: newBody
            });